// Autogenerated from Pigeon (v1.0.12), do not edit directly.
// See also: https://pub.dev/packages/pigeon
#import "pigeon.h"
#import <Flutter/Flutter.h>

#if !__has_feature(objc_arc)
#error File requires ARC to be enabled.
#endif

static NSDictionary<NSString *, id> *wrapResult(id result, FlutterError *error) {
  NSDictionary *errorDict = (NSDictionary *)[NSNull null];
  if (error) {
    errorDict = @{
        @"code": (error.code ? error.code : [NSNull null]),
        @"message": (error.message ? error.message : [NSNull null]),
        @"details": (error.details ? error.details : [NSNull null]),
        };
  }
  return @{
      @"result": (result ? result : [NSNull null]),
      @"error": errorDict,
      };
}

@interface FLTDdSdkConfiguration ()
+ (FLTDdSdkConfiguration *)fromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end

@implementation FLTDdSdkConfiguration
+ (FLTDdSdkConfiguration *)fromMap:(NSDictionary *)dict {
  FLTDdSdkConfiguration *result = [[FLTDdSdkConfiguration alloc] init];
  result.clientToken = dict[@"clientToken"];
  if ((NSNull *)result.clientToken == [NSNull null]) {
    result.clientToken = nil;
  }
  result.env = dict[@"env"];
  if ((NSNull *)result.env == [NSNull null]) {
    result.env = nil;
  }
  result.applicationId = dict[@"applicationId"];
  if ((NSNull *)result.applicationId == [NSNull null]) {
    result.applicationId = nil;
  }
  result.nativeCrashReportEnabled = dict[@"nativeCrashReportEnabled"];
  if ((NSNull *)result.nativeCrashReportEnabled == [NSNull null]) {
    result.nativeCrashReportEnabled = nil;
  }
  result.sampleRate = dict[@"sampleRate"];
  if ((NSNull *)result.sampleRate == [NSNull null]) {
    result.sampleRate = nil;
  }
  result.site = dict[@"site"];
  if ((NSNull *)result.site == [NSNull null]) {
    result.site = nil;
  }
  result.trackingConsent = dict[@"trackingConsent"];
  if ((NSNull *)result.trackingConsent == [NSNull null]) {
    result.trackingConsent = nil;
  }
  result.additionalConfig = dict[@"additionalConfig"];
  if ((NSNull *)result.additionalConfig == [NSNull null]) {
    result.additionalConfig = nil;
  }
  return result;
}
- (NSDictionary *)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.clientToken ? self.clientToken : [NSNull null]), @"clientToken", (self.env ? self.env : [NSNull null]), @"env", (self.applicationId ? self.applicationId : [NSNull null]), @"applicationId", (self.nativeCrashReportEnabled ? self.nativeCrashReportEnabled : [NSNull null]), @"nativeCrashReportEnabled", (self.sampleRate ? self.sampleRate : [NSNull null]), @"sampleRate", (self.site ? self.site : [NSNull null]), @"site", (self.trackingConsent ? self.trackingConsent : [NSNull null]), @"trackingConsent", (self.additionalConfig ? self.additionalConfig : [NSNull null]), @"additionalConfig", nil];
}
@end

@interface FLTDdSdkPigeonCodecReader : FlutterStandardReader
@end
@implementation FLTDdSdkPigeonCodecReader
- (nullable id)readValueOfType:(UInt8)type 
{
  switch (type) {
    case 128:     
      return [FLTDdSdkConfiguration fromMap:[self readValue]];
    
    default:    
      return [super readValueOfType:type];
    
  }
}
@end

@interface FLTDdSdkPigeonCodecWriter : FlutterStandardWriter
@end
@implementation FLTDdSdkPigeonCodecWriter
- (void)writeValue:(id)value 
{
  if ([value isKindOfClass:[FLTDdSdkConfiguration class]]) {
    [self writeByte:128];
    [self writeValue:[value toMap]];
  } else 
{
    [super writeValue:value];
  }
}
@end

@interface FLTDdSdkPigeonCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation FLTDdSdkPigeonCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[FLTDdSdkPigeonCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[FLTDdSdkPigeonCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *FLTDdSdkPigeonGetCodec() {
  static dispatch_once_t s_pred = 0;
  static FlutterStandardMessageCodec *s_sharedObject = nil;
  dispatch_once(&s_pred, ^{
    FLTDdSdkPigeonCodecReaderWriter *readerWriter = [[FLTDdSdkPigeonCodecReaderWriter alloc] init];
    s_sharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return s_sharedObject;
}


void FLTDdSdkPigeonSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<FLTDdSdkPigeon> *api) {
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.DdSdkPigeon.initialize"
        binaryMessenger:binaryMessenger
        codec:FLTDdSdkPigeonGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(initializeConfiguration:error:)], @"FLTDdSdkPigeon api (%@) doesn't respond to @selector(initializeConfiguration:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        FLTDdSdkConfiguration *arg_configuration = args[0];
        FlutterError *error;
        [api initializeConfiguration:arg_configuration error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
}
@interface FLTDdLogsPigeonCodecReader : FlutterStandardReader
@end
@implementation FLTDdLogsPigeonCodecReader
- (nullable id)readValueOfType:(UInt8)type 
{
  switch (type) {
    case 128:     
      return [FLTDdSdkConfiguration fromMap:[self readValue]];
    
    default:    
      return [super readValueOfType:type];
    
  }
}
@end

@interface FLTDdLogsPigeonCodecWriter : FlutterStandardWriter
@end
@implementation FLTDdLogsPigeonCodecWriter
- (void)writeValue:(id)value 
{
  if ([value isKindOfClass:[FLTDdSdkConfiguration class]]) {
    [self writeByte:128];
    [self writeValue:[value toMap]];
  } else 
{
    [super writeValue:value];
  }
}
@end

@interface FLTDdLogsPigeonCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation FLTDdLogsPigeonCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[FLTDdLogsPigeonCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[FLTDdLogsPigeonCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *FLTDdLogsPigeonGetCodec() {
  static dispatch_once_t s_pred = 0;
  static FlutterStandardMessageCodec *s_sharedObject = nil;
  dispatch_once(&s_pred, ^{
    FLTDdLogsPigeonCodecReaderWriter *readerWriter = [[FLTDdLogsPigeonCodecReaderWriter alloc] init];
    s_sharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return s_sharedObject;
}


void FLTDdLogsPigeonSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<FLTDdLogsPigeon> *api) {
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.DdLogsPigeon.debug"
        binaryMessenger:binaryMessenger
        codec:FLTDdLogsPigeonGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(debugMessage:context:error:)], @"FLTDdLogsPigeon api (%@) doesn't respond to @selector(debugMessage:context:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_message = args[0];
        NSDictionary<NSString *, id> *arg_context = args[1];
        FlutterError *error;
        [api debugMessage:arg_message context:arg_context error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.DdLogsPigeon.info"
        binaryMessenger:binaryMessenger
        codec:FLTDdLogsPigeonGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(infoMessage:context:error:)], @"FLTDdLogsPigeon api (%@) doesn't respond to @selector(infoMessage:context:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_message = args[0];
        NSDictionary<NSString *, id> *arg_context = args[1];
        FlutterError *error;
        [api infoMessage:arg_message context:arg_context error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.DdLogsPigeon.warn"
        binaryMessenger:binaryMessenger
        codec:FLTDdLogsPigeonGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(warnMessage:context:error:)], @"FLTDdLogsPigeon api (%@) doesn't respond to @selector(warnMessage:context:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_message = args[0];
        NSDictionary<NSString *, id> *arg_context = args[1];
        FlutterError *error;
        [api warnMessage:arg_message context:arg_context error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.DdLogsPigeon.error"
        binaryMessenger:binaryMessenger
        codec:FLTDdLogsPigeonGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(errorMessage:context:error:)], @"FLTDdLogsPigeon api (%@) doesn't respond to @selector(errorMessage:context:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_message = args[0];
        NSDictionary<NSString *, id> *arg_context = args[1];
        FlutterError *error;
        [api errorMessage:arg_message context:arg_context error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
}
