// Autogenerated from Pigeon (v1.0.12), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package com.datadoghq.flutter_sdk;

import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MessageCodec;
import io.flutter.plugin.common.StandardMessageCodec;
import java.io.ByteArrayOutputStream;
import java.nio.ByteBuffer;
import java.util.Arrays;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.HashMap;

/** Generated class from Pigeon. */
@SuppressWarnings({"unused", "unchecked", "CodeBlock2Expr", "RedundantSuppression"})
public class Pigeon {

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class DdSdkConfiguration {
    private String clientToken;
    public String getClientToken() { return clientToken; }
    public void setClientToken(String setterArg) { this.clientToken = setterArg; }

    private String env;
    public String getEnv() { return env; }
    public void setEnv(String setterArg) { this.env = setterArg; }

    private String applicationId;
    public String getApplicationId() { return applicationId; }
    public void setApplicationId(String setterArg) { this.applicationId = setterArg; }

    private Boolean nativeCrashReportEnabled;
    public Boolean getNativeCrashReportEnabled() { return nativeCrashReportEnabled; }
    public void setNativeCrashReportEnabled(Boolean setterArg) { this.nativeCrashReportEnabled = setterArg; }

    private Double sampleRate;
    public Double getSampleRate() { return sampleRate; }
    public void setSampleRate(Double setterArg) { this.sampleRate = setterArg; }

    private String site;
    public String getSite() { return site; }
    public void setSite(String setterArg) { this.site = setterArg; }

    private String trackingConsent;
    public String getTrackingConsent() { return trackingConsent; }
    public void setTrackingConsent(String setterArg) { this.trackingConsent = setterArg; }

    private Map<String, Object> additionalConfig;
    public Map<String, Object> getAdditionalConfig() { return additionalConfig; }
    public void setAdditionalConfig(Map<String, Object> setterArg) { this.additionalConfig = setterArg; }

    Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("clientToken", clientToken);
      toMapResult.put("env", env);
      toMapResult.put("applicationId", applicationId);
      toMapResult.put("nativeCrashReportEnabled", nativeCrashReportEnabled);
      toMapResult.put("sampleRate", sampleRate);
      toMapResult.put("site", site);
      toMapResult.put("trackingConsent", trackingConsent);
      toMapResult.put("additionalConfig", additionalConfig);
      return toMapResult;
    }
    static DdSdkConfiguration fromMap(Map<String, Object> map) {
      DdSdkConfiguration fromMapResult = new DdSdkConfiguration();
      Object clientToken = map.get("clientToken");
      fromMapResult.clientToken = (String)clientToken;
      Object env = map.get("env");
      fromMapResult.env = (String)env;
      Object applicationId = map.get("applicationId");
      fromMapResult.applicationId = (String)applicationId;
      Object nativeCrashReportEnabled = map.get("nativeCrashReportEnabled");
      fromMapResult.nativeCrashReportEnabled = (Boolean)nativeCrashReportEnabled;
      Object sampleRate = map.get("sampleRate");
      fromMapResult.sampleRate = (Double)sampleRate;
      Object site = map.get("site");
      fromMapResult.site = (String)site;
      Object trackingConsent = map.get("trackingConsent");
      fromMapResult.trackingConsent = (String)trackingConsent;
      Object additionalConfig = map.get("additionalConfig");
      fromMapResult.additionalConfig = (Map<String, Object>)additionalConfig;
      return fromMapResult;
    }
  }
  private static class DdSdkPigeonCodec extends StandardMessageCodec {
    public static final DdSdkPigeonCodec INSTANCE = new DdSdkPigeonCodec();
    private DdSdkPigeonCodec() {}
    @Override
    protected Object readValueOfType(byte type, ByteBuffer buffer) {
      switch (type) {
        case (byte)128:         
          return DdSdkConfiguration.fromMap((Map<String, Object>) readValue(buffer));
        
        default:        
          return super.readValueOfType(type, buffer);
        
      }
    }
    @Override
    protected void writeValue(ByteArrayOutputStream stream, Object value)     {
      if (value instanceof DdSdkConfiguration) {
        stream.write(128);
        writeValue(stream, ((DdSdkConfiguration) value).toMap());
      } else 
{
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter.*/
  public interface DdSdkPigeon {
    void initialize(DdSdkConfiguration configuration);

    /** The codec used by DdSdkPigeon. */
    static MessageCodec<Object> getCodec() {
      return DdSdkPigeonCodec.INSTANCE;
    }

    /** Sets up an instance of `DdSdkPigeon` to handle messages through the `binaryMessenger`. */
    static void setup(BinaryMessenger binaryMessenger, DdSdkPigeon api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.DdSdkPigeon.initialize", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              DdSdkConfiguration configurationArg = (DdSdkConfiguration)args.get(0);
              if (configurationArg == null) {
                throw new NullPointerException("configurationArg unexpectedly null.");
              }
              api.initialize(configurationArg);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
  private static class DdLogsPigeonCodec extends StandardMessageCodec {
    public static final DdLogsPigeonCodec INSTANCE = new DdLogsPigeonCodec();
    private DdLogsPigeonCodec() {}
    @Override
    protected Object readValueOfType(byte type, ByteBuffer buffer) {
      switch (type) {
        case (byte)128:         
          return DdSdkConfiguration.fromMap((Map<String, Object>) readValue(buffer));
        
        default:        
          return super.readValueOfType(type, buffer);
        
      }
    }
    @Override
    protected void writeValue(ByteArrayOutputStream stream, Object value)     {
      if (value instanceof DdSdkConfiguration) {
        stream.write(128);
        writeValue(stream, ((DdSdkConfiguration) value).toMap());
      } else 
{
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter.*/
  public interface DdLogsPigeon {
    void debug(String message, Map<String, Object> context);
    void info(String message, Map<String, Object> context);
    void warn(String message, Map<String, Object> context);
    void error(String message, Map<String, Object> context);

    /** The codec used by DdLogsPigeon. */
    static MessageCodec<Object> getCodec() {
      return DdLogsPigeonCodec.INSTANCE;
    }

    /** Sets up an instance of `DdLogsPigeon` to handle messages through the `binaryMessenger`. */
    static void setup(BinaryMessenger binaryMessenger, DdLogsPigeon api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.DdLogsPigeon.debug", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String messageArg = (String)args.get(0);
              if (messageArg == null) {
                throw new NullPointerException("messageArg unexpectedly null.");
              }
              Map<String, Object> contextArg = (Map<String, Object>)args.get(1);
              if (contextArg == null) {
                throw new NullPointerException("contextArg unexpectedly null.");
              }
              api.debug(messageArg, contextArg);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.DdLogsPigeon.info", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String messageArg = (String)args.get(0);
              if (messageArg == null) {
                throw new NullPointerException("messageArg unexpectedly null.");
              }
              Map<String, Object> contextArg = (Map<String, Object>)args.get(1);
              if (contextArg == null) {
                throw new NullPointerException("contextArg unexpectedly null.");
              }
              api.info(messageArg, contextArg);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.DdLogsPigeon.warn", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String messageArg = (String)args.get(0);
              if (messageArg == null) {
                throw new NullPointerException("messageArg unexpectedly null.");
              }
              Map<String, Object> contextArg = (Map<String, Object>)args.get(1);
              if (contextArg == null) {
                throw new NullPointerException("contextArg unexpectedly null.");
              }
              api.warn(messageArg, contextArg);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.DdLogsPigeon.error", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String messageArg = (String)args.get(0);
              if (messageArg == null) {
                throw new NullPointerException("messageArg unexpectedly null.");
              }
              Map<String, Object> contextArg = (Map<String, Object>)args.get(1);
              if (contextArg == null) {
                throw new NullPointerException("contextArg unexpectedly null.");
              }
              api.error(messageArg, contextArg);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
  private static Map<String, Object> wrapError(Throwable exception) {
    Map<String, Object> errorMap = new HashMap<>();
    errorMap.put("message", exception.toString());
    errorMap.put("code", exception.getClass().getSimpleName());
    errorMap.put("details", null);
    return errorMap;
  }
}
